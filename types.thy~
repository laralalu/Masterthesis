theory types     
  imports Main 
begin

(*Basic types for SDL and DDL*)
typedecl i (*Type for possible worlds.*)
type_synonym \<sigma> = "(i\<Rightarrow>bool)"
type_synonym \<gamma> = "\<sigma>\<Rightarrow>\<sigma>" 
type_synonym \<rho> = "\<sigma>\<Rightarrow>\<sigma>\<Rightarrow>\<sigma>"
type_synonym \<tau> = "(i\<Rightarrow>i\<Rightarrow>bool)\<Rightarrow>\<sigma>\<Rightarrow>\<sigma>" 
type_synonym \<mu> = "(\<sigma>\<Rightarrow>(\<sigma>\<Rightarrow>bool))\<Rightarrow>(i\<Rightarrow>i\<Rightarrow>bool)\<Rightarrow>\<sigma>\<Rightarrow>\<sigma>"
type_synonym \<nu> = "(\<sigma>\<Rightarrow>(\<sigma>\<Rightarrow>bool))\<Rightarrow>\<sigma>\<Rightarrow>\<sigma>\<Rightarrow>\<sigma>"

(*Recurring types needed for AI-systems*)
typedecl aiSys (*Type for AI-systems*)
typedecl member_state (*Type for EU member states*)
typedecl agent (*type for agent*)
datatype agent1 = eu_comm | juridicial_auth | admin_auth | provider | nat_comp_auth | user
typedecl qualManSys (*quality management system*)
typedecl rms (*risk-management-system*)
typedecl certificate (*certificate by notified body*)
typedecl bioid_rules (*specified rules for real time bio identification systems*)
typedecl national_law  (*national law of member states*) 

(*standards that must be considered*)
datatype standard = harm_stand_art_40 
(*size of provider's organisation*)
datatype size = small | medium | large 
(*Type for purposes of AI-systems*)
datatype purpose = distort_behavior | exploit_groups | eval_trustworthiness_over_time | targeted_search | 
prevention | detection
(*Type for risks caused by AI-sytems*)
datatype risk = data_leak | incorrect_info | discrimination
(*Type for consequences caused by AI-systems*)
datatype consequence = harm | harm_physical | harm_psychological | detri_treatment_unrelated_context | 
detri_treatment_unjustified_disprop | affect_personal_rights | affect_personal_freedom
(*quality of a person*)
datatype quality_person = age | physcial_disability | mental_disability
(*Type for situation in which AI-System is used*)
datatype situation = private_place | public 
datatype authority =  judicial_authority | independent_admin_authority
(*degree of a quality, strength*)
datatype degree = low | medium | high

consts 
   prohibited :: "aiSys \<Rightarrow> \<sigma>" (*system is prohibited*)
   high_risk :: "aiSys \<Rightarrow> \<sigma>" (*system is a high-risk system*)
   (*
   a::agent (*Agent type for judicial authorities or independent administrative authorities*)
   b::agent (*Agent type for member state*)
   c::agent (*Agent type for the EU commission*)
   d::agent (*Agent type for providers*)
   e::agent (*Agent type for conformity assessment bodies*)
   f::agent (*Agent type for notifying authorities*)
   g::agent (*Agent type for notified bodies*)
   h::agent (*Agent type for importers*)
   i::agent (*Agent type for users*)
  *)
end